<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Live Network Map</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <style>
        body {
            margin: 0;
            font-family: sans-serif;
        }

        #map {
            height: 100vh;
            width: 100vw;
        }

        .leaflet-popup-content-wrapper {
            border-radius: 5px;
        }

        .leaflet-popup-content h3 {
            margin: 0 0 5px;
        }

        .leaflet-popup-content p {
            margin: 0;
        }

        .status-online {
            color: #4caf50;
            font-weight: bold;
        }

        .status-offline {
            color: #f44336;
            font-weight: bold;
        }

        .status-unknown {
            color: #999;
            font-weight: bold;
        }

        .ping-fast {
            color: #4caf50;
        }

        .ping-medium {
            color: #ff9800;
        }

        .ping-slow {
            color: #f44336;
        }
    </style>
</head>
<body>
    <div id="map"></div>
    <script>
        function getPingClass(pingMs) {
            if (pingMs < 0) return 'ping-slow';
            if (pingMs < 50) return 'ping-fast';
            if (pingMs < 150) return 'ping-medium';
            return 'ping-slow';
        }
        const map = L.map('map').setView([39, -98], 4);

        L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
            attribution: '&copy; OpenStreetMap contributors &copy; CARTO'
        }).addTo(map);

        fetch('Default.aspx')
            .then(response => response.json())
            .then(servers => {
                servers.forEach(server => {
                    const marker = L.marker([server.Lat, server.Lon]).addTo(map);
                    const statusClass = server.Status === 'Online' ? 'status-online' : (server.Status === 'Offline' ? 'status-offline' : 'status-unknown');
                    const pingClass = getPingClass(server.PingMs);
                    const popupContent = `
                        <h3>${server.Name}</h3>
                        <p><strong>IP:</strong> ${server.Ip}</p>
                        <p><strong>Role:</strong> ${server.Role}</p>
                        <p><strong>Location:</strong> ${server.Location}</p>
                        <p><strong>Status:</strong> <span class="${statusClass}">${server.Status}</span></p>
                        <p><strong>Ping:</strong> <span class="${pingClass}">${server.PingMs >= 0 ? server.PingMs + ' ms' : 'N/A'}</span></p>
                        <p><strong>Last Checked:</strong> ${server.LastChecked}</p>
                        ${server.Status === 'Offline' ? `<p><strong>Offline Message:</strong> ${server.OfflineMessage}</p>` : ''}
                    `;
                    marker.bindPopup(popupContent);
                });
            })
            .catch(error => console.error('Error fetching server data:', error));
    </script>
</body>
</html>