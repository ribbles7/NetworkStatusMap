<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Live Network Map</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <style>
        body { margin: 0; font-family: sans-serif; }
        #map { height: 100vh; width: 100vw; }
        .leaflet-popup-content-wrapper { border-radius: 5px; }
        .leaflet-popup-content h3 { margin: 0 0 5px; }
        .leaflet-popup-content p { margin: 0; }
        .status-online { color: #4caf50; font-weight: bold; }
        .status-offline { color: #f44336; font-weight: bold; }
        .status-unknown { color: #999; font-weight: bold; }
        .ping-fast { color: #4caf50; }
        .ping-medium { color: #ff9800; }
        .ping-slow { color: #f44336; }
        #summary {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(30,30,30,0.95);
            color: #fff;
            padding: 16px 24px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
            z-index: 1000;
            font-size: 1.1em;
        }
        #summary .online { color: #4caf50; font-weight: bold; }
        #summary .offline { color: #f44336; font-weight: bold; }
        #summary .sla { color: #2196f3; font-weight: bold; }
    </style>
</head>
<body>
    <div id="map"></div>
    <div id="summary"></div>
    <script>
        function getPingClass(pingMs) {
            if (pingMs < 0) return 'ping-slow';
            if (pingMs < 50) return 'ping-fast';
            if (pingMs < 150) return 'ping-medium';
            return 'ping-slow';
        }
        const map = L.map('map').setView([20, 0], 2);

        L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
            attribution: '&copy; OpenStreetMap contributors &copy; CARTO'
        }).addTo(map);

        fetch('Default.aspx')
            .then(response => response.json())
            .then(servers => {
                let onlineCount = 0;
                let offlineCount = 0;
                servers.forEach(server => {
                    if (server.Status === 'Online') onlineCount++;
                    else if (server.Status === 'Offline') offlineCount++;
                    let markerOptions = {};
                    if (server.Status === 'Offline') {
                        markerOptions = { icon: L.icon({
                            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',
                            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.4/images/marker-shadow.png',
                            iconSize: [25, 41],
                            iconAnchor: [12, 41],
                            popupAnchor: [1, -34],
                            shadowSize: [41, 41]
                        }) };
                    }
                    const marker = L.marker([server.Lat, server.Lon], markerOptions).addTo(map);
                    const statusClass = server.Status === 'Online' ? 'status-online' : (server.Status === 'Offline' ? 'status-offline' : 'status-unknown');
                    const pingClass = getPingClass(server.PingMs);
                    const popupContent = `
                        <h3>${server.Name}</h3>
                        <p><strong>IP:</strong> ${server.Ip}</p>
                        <p><strong>Role:</strong> ${server.Role}</p>
                        <p><strong>Location:</strong> ${server.Location}</p>
                        <p><strong>Status:</strong> <span class="${statusClass}">${server.Status}</span></p>
                        <p><strong>Ping:</strong> <span class="${pingClass}">${server.PingMs >= 0 ? server.PingMs + ' ms' : 'N/A'}</span></p>
                        <p><strong>Last Checked:</strong> ${server.LastChecked}</p>
                        ${server.Status === 'Offline' ? `<p><strong>Offline Message:</strong> ${server.OfflineMessage}</p>` : ''}
                    `;
                    marker.bindPopup(popupContent);
                });
                // % Online Metric
                const total = onlineCount + offlineCount;
                const percentOnline = total > 0 ? ((onlineCount / total) * 100).toFixed(2) : 'N/A';
                document.getElementById('summary').innerHTML = `
                    <div><strong>Total Online:</strong> <span class="online">${onlineCount}</span></div>
                    <div><strong>Total Offline:</strong> <span class="offline">${offlineCount}</span></div>
                    <div><strong>% Online:</strong> <span class="sla">${percentOnline}%</span></div>
                `;
            })
            .catch(error => console.error('Error fetching server data:', error));
    </script>
</body>
</html>