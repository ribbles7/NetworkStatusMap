using System;
using System.Collections.Generic;
using System.Web.Script.Serialization;
using System.Xml;
using System.Net.NetworkInformation;
using System.Diagnostics;
using System.Globalization;

namespace LiveNetworkMap
{
    public partial class Default : System.Web.UI.Page
    {
        // Simple location lookup for demo purposes
        private string GetLocation(double lat, double lon)
        {
            // Hardcoded locations for all servers in servers.xml
            if (lat == 33.4484 && lon == -112.0740) return "Phoenix, AZ";
            if (lat == 34.0522 && lon == -118.2437) return "Los Angeles, CA";
            if (lat == 47.6062 && lon == -122.3321) return "Seattle, WA";
            if (lat == 39.7392 && lon == -104.9903) return "Denver, CO";
            if (lat == 32.7767 && lon == -96.7970) return "Dallas, TX";
            if (lat == 41.8781 && lon == -87.6298) return "Chicago, IL";
            if (lat == 33.7490 && lon == -84.3880) return "Atlanta, GA";
            if (lat == 25.7617 && lon == -80.1918) return "Miami, FL";
            if (lat == 38.9445 && lon == -77.4558) return "Ashburn, VA";
            if (lat == 40.6413 && lon == -73.7781) return "New York, NY";
            if (lat == 42.3601 && lon == -71.0589) return "Boston, MA";
            if (lat == 37.7749 && lon == -122.4194) return "San Francisco, CA";
            if (lat == 36.1699 && lon == -115.1398) return "Las Vegas, NV";
            if (lat == 40.7608 && lon == -111.8910) return "Salt Lake City, UT";
            if (lat == 44.9778 && lon == -93.2650) return "Minneapolis, MN";
            if (lat == 38.6270 && lon == -90.1994) return "St. Louis, MO";
            if (lat == 35.2271 && lon == -80.8431) return "Charlotte, NC";
            if (lat == 36.1627 && lon == -86.7816) return "Nashville, TN";
            if (lat == 45.5051 && lon == -122.6750) return "Portland, OR";
            if (lat == 29.7604 && lon == -95.3698) return "Houston, TX";
            if (lat == 61.2181 && lon == -149.9003) return "Anchorage, AK";
            if (lat == 21.3069 && lon == -157.8583) return "Honolulu, HI";
            return "Unknown";
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            try
            {
                string pingIp = Request.QueryString["ping"];
                string tracerouteIp = Request.QueryString["traceroute"];
                if (!string.IsNullOrEmpty(pingIp))
                {
                    // Run ping command
                    string result = RunPing(pingIp);
                    Response.Clear();
                    Response.ContentType = "text/plain";
                    Response.Write(result);
                    Response.Flush();
                    Context.ApplicationInstance.CompleteRequest();
                    return;
                }
                if (!string.IsNullOrEmpty(tracerouteIp))
                {
                    // Run traceroute command
                    string result = RunTraceroute(tracerouteIp);
                    Response.Clear();
                    Response.ContentType = "text/plain";
                    Response.Write(result);
                    Response.Flush();
                    Context.ApplicationInstance.CompleteRequest();
                    return;
                }

                var serverList = new List<Server>();
                string xmlFilePath = Server.MapPath("~/servers.xml");

                XmlDocument doc = new XmlDocument();
                doc.Load(xmlFilePath);

                foreach (XmlNode node in doc.SelectNodes("/servers/server"))
                {
                    var ip = node["ip"].InnerText;
                    string status = "Unknown";
                    long pingMs = -1;
                    int failureCount = 0;
                    string offlineMessage = "";
                    try
                    {
                        using (var ping = new Ping())
                        {
                            var start = DateTime.UtcNow;
                            var reply = ping.Send(ip, 1000); // 1 second timeout
                            var end = DateTime.UtcNow;
                            pingMs = reply.RoundtripTime;
                            status = (reply.Status == IPStatus.Success) ? "Online" : "Offline";
                            if (status == "Offline")
                            {
                                failureCount = 1;
                                offlineMessage = "Ping failed. Check network/firewall.";
                            }
                        }
                    }
                    catch
                    {
                        status = "Offline";
                        pingMs = -1;
                        failureCount = 1;
                        offlineMessage = "Ping exception. Host unreachable.";
                    }

                    double lat = Convert.ToDouble(node["lat"].InnerText, CultureInfo.InvariantCulture);
                    double lon = Convert.ToDouble(node["lon"].InnerText, CultureInfo.InvariantCulture);

                    serverList.Add(new Server
                    {
                        Name = node["name"].InnerText,
                        Ip = ip,
                        Role = node["role"].InnerText,
                        Lat = lat,
                        Lon = lon,
                        Status = status,
                        PingMs = pingMs,
                        LastChecked = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss 'UTC'"),
                        Location = GetLocation(lat, lon),
                        FailureCount = failureCount,
                        OfflineMessage = offlineMessage
                    });
                }

                var jsonSerializer = new JavaScriptSerializer();
                string json = jsonSerializer.Serialize(serverList);

                Response.Clear();
                Response.ContentType = "application/json; charset=utf-8";
                Response.Write(json);
                Response.Flush();
                Context.ApplicationInstance.CompleteRequest();
            }
            catch (Exception ex)
            {
                Response.Clear();
                Response.ContentType = "text/plain";
                Response.Write("Error: " + ex.Message);
                Response.Flush();
                Context.ApplicationInstance.CompleteRequest();
            }
        }

        private string RunPing(string ip)
        {
            try
            {
                using (var ping = new Ping())
                {
                    var reply = ping.Send(ip, 2000); // 2 second timeout
                    if (reply.Status == IPStatus.Success)
                    {
                        return $"Ping to {ip} successful: {reply.RoundtripTime} ms";
                    }
                    else
                    {
                        return $"Ping to {ip} failed: {reply.Status}";
                    }
                }
            }
            catch (Exception ex)
            {
                return $"Ping error: {ex.Message}";
            }
        }

        private string RunTraceroute(string ip)
        {
            try
            {
                // Windows: tracert, Linux: traceroute
                var psi = new ProcessStartInfo
                {
                    FileName = "cmd.exe",
                    Arguments = $"/c tracert -d -w 1000 -h 15 {ip}",
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    UseShellExecute = false,
                    CreateNoWindow = true
                };
                using (var proc = Process.Start(psi))
                {
                    string output = proc.StandardOutput.ReadToEnd();
                    string error = proc.StandardError.ReadToEnd();
                    proc.WaitForExit(10000); // 10 seconds max
                    if (!string.IsNullOrWhiteSpace(output))
                        return output;
                    else
                        return error;
                }
            }
            catch (Exception ex)
            {
                return $"Traceroute error: {ex.Message}";
            }
        }
    }
}